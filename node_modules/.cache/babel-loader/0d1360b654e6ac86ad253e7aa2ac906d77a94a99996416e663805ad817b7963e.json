{"ast":null,"code":"import { api } from \"~api\";\nexport default {\n  props: [\"repo\"],\n  data: () => ({\n    contents: [],\n    loading: false,\n    directoryContent: true,\n    previousPath: \"\"\n  }),\n  methods: {\n    async listContent() {\n      this.loading = true;\n      const contents = await api.listContent(this.repo.owner.login, this.repo.name);\n      this.contents = this.contents.concat(contents);\n      this.loading = false;\n    },\n    async listFolderContent(path) {\n      this.loading = true;\n      const contents = await api.listFolderContent(this.repo.owner.login, this.repo.name, path);\n      console.log(contents);\n      this.contents = this.contents.concat(contents);\n      this.loading = false;\n    },\n    isDirectory(type) {\n      return type == \"dir\";\n    },\n    openDirectory(path) {\n      this.contents = [];\n      this.listFolderContent(path);\n    }\n    // directoryContent() {},\n  },\n\n  watch: {\n    repo() {\n      this.contents = [];\n      this.listContent();\n    }\n  }\n};","map":{"version":3,"mappings":"AAsDA;AACA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACA;MACA,uCACA,uBACA,eACA;MACA;MACA;IACA;IACA;MACA;MACA,6CACA,uBACA,gBACAC,KACA;MACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;IACA;IACA;EACA;;EACAC;IACAC;MACA;MACA;IACA;EACA;AACA","names":["props","data","contents","loading","directoryContent","previousPath","methods","path","console","isDirectory","openDirectory","watch","repo"],"sourceRoot":"src/components","sources":["GithubRepositories.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-simple-table>\n          <template v-slot:default>\n            <thead>\n              <tr>\n                <th class=\"text-left\">Repository</th>\n                <th class=\"text-left\">Type of document</th>\n                <th class=\"text-left\">Link to file</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"content in contents\" :key=\"content.name\">\n                <td v-if=\"isDirectory(content.type)\">\n                  <button\n                    class=\"directory teal--text text-decoration-underline\"\n                    @click=\"openDirectory(content.path)\"\n                  >\n                    {{ content.name }}\n                  </button>\n                </td>\n                <td v-else>\n                  {{ content.name }}\n                </td>\n                <td>\n                  {{ content.type }}\n                </td>\n                <td>\n                  <a :href=\"content.html_url\">{{ content.type }}</a>\n                </td>\n              </tr>\n              <div v-if=\"directoryContent\">\n                <v-btn class=\"ma-2\" outlined color=\"teal\"> Back </v-btn>\n              </div>\n            </tbody>\n          </template>\n        </v-simple-table>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-progress-circular\n          indeterminate\n          color=\"primary\"\n          v-if=\"loading\"\n        ></v-progress-circular>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { api } from \"~api\";\nexport default {\n  props: [\"repo\"],\n  data: () => ({\n    contents: [],\n    loading: false,\n    directoryContent: true,\n    previousPath: \"\",\n  }),\n  methods: {\n    async listContent() {\n      this.loading = true;\n      const contents = await api.listContent(\n        this.repo.owner.login,\n        this.repo.name\n      );\n      this.contents = this.contents.concat(contents);\n      this.loading = false;\n    },\n    async listFolderContent(path) {\n      this.loading = true;\n      const contents = await api.listFolderContent(\n        this.repo.owner.login,\n        this.repo.name,\n        path\n      );\n      console.log(contents);\n      this.contents = this.contents.concat(contents);\n      this.loading = false;\n    },\n    isDirectory(type) {\n      return type == \"dir\";\n    },\n    openDirectory(path) {\n      this.contents = [];\n      this.listFolderContent(path);\n    },\n    // directoryContent() {},\n  },\n  watch: {\n    repo() {\n      this.contents = [];\n      this.listContent();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}