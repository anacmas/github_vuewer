{"ast":null,"code":"import { api } from \"~api\";\nimport FilesList from \"./FilesList.vue\";\nexport default {\n  props: [\"repo\"],\n  data: () => ({\n    contents: [],\n    loading: false,\n    directoryContent: true,\n    previousPath: null\n  }),\n  methods: {\n    async listContent() {\n      this.loading = true;\n      const contents = await api.listContent(this.repo.owner.login, this.repo.name);\n      this.contents = this.contents.concat(contents);\n      this.previousPath = null;\n      this.loading = false;\n      console.log(contents);\n    },\n    async listFolderContent(path, index) {\n      this.loading = true;\n      const contents = await api.listFolderContent(this.repo.owner.login, this.repo.name, path);\n      let newPreviousPathList = path.split(\"/\");\n      newPreviousPathList.pop();\n      const newPreviousPath = newPreviousPathList.join(\"/\");\n      this.previousPath = newPreviousPath;\n      console.log(contents);\n      this.contents[index].contents = contents;\n      this.loading = false;\n      console.log(this.contents);\n    },\n    isDirectory(type) {\n      return type == \"dir\";\n    },\n    openDirectory(path, index) {\n      this.listFolderContent(path, index);\n    },\n    goBack() {\n      if (this.previousPath == \"\") {\n        this.contents = [];\n        this.listContent();\n      } else {\n        this.contents = [];\n        this.listFolderContent(this.previousPath);\n      }\n    }\n  },\n  watch: {\n    repo() {\n      this.contents = [];\n      this.listContent();\n    }\n  },\n  components: {\n    FilesList,\n    FilesList\n  }\n};","map":{"version":3,"mappings":"AA4CA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACA;MACA,uCACA,uBACA,eACA;MACA;MACA;MACA;MACAC;IACA;IACA;MACA;MACA,6CACA,uBACA,gBACAC,KACA;MACA;MACAC;MACA;MACA;MACAF;MACA;MACA;MACAA;IACA;IACAG;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;QACA;QACA;MACA;QACA;QACA;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;IACA;EACA;EACAC;IAAAC;IAAAA;EAAA;AACA","names":["props","data","contents","loading","directoryContent","previousPath","methods","console","path","newPreviousPathList","isDirectory","openDirectory","goBack","watch","repo","components","FilesList"],"sourceRoot":"src/components","sources":["GithubRepositories.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-simple-table>\n          <template v-slot:default>\n            <thead>\n              <tr>\n                <th class=\"text-left\">Repository</th>\n                <th class=\"text-left\">Type of document</th>\n                <th class=\"text-left\">Link to file</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(content, index) in contents\" :key=\"index\">\n                <FilesList\n                  :content=\"content\"\n                  :openDirectory=\"openDirectory\"\n                  :index=\"index\"\n                />\n              </tr>\n              <div v-if=\"typeof previousPath == 'string'\">\n                <v-btn class=\"ma-2\" outlined color=\"teal\" @click=\"goBack\">\n                  Back\n                </v-btn>\n              </div>\n            </tbody>\n          </template>\n        </v-simple-table>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-progress-circular\n          indeterminate\n          color=\"primary\"\n          v-if=\"loading\"\n        ></v-progress-circular>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { api } from \"~api\";\nimport FilesList from \"./FilesList.vue\";\n\nexport default {\n  props: [\"repo\"],\n  data: () => ({\n    contents: [],\n    loading: false,\n    directoryContent: true,\n    previousPath: null,\n  }),\n  methods: {\n    async listContent() {\n      this.loading = true;\n      const contents = await api.listContent(\n        this.repo.owner.login,\n        this.repo.name\n      );\n      this.contents = this.contents.concat(contents);\n      this.previousPath = null;\n      this.loading = false;\n      console.log(contents);\n    },\n    async listFolderContent(path, index) {\n      this.loading = true;\n      const contents = await api.listFolderContent(\n        this.repo.owner.login,\n        this.repo.name,\n        path\n      );\n      let newPreviousPathList = path.split(\"/\");\n      newPreviousPathList.pop();\n      const newPreviousPath = newPreviousPathList.join(\"/\");\n      this.previousPath = newPreviousPath;\n      console.log(contents);\n      this.contents[index].contents = contents;\n      this.loading = false;\n      console.log(this.contents);\n    },\n    isDirectory(type) {\n      return type == \"dir\";\n    },\n    openDirectory(path, index) {\n      this.listFolderContent(path, index);\n    },\n    goBack() {\n      if (this.previousPath == \"\") {\n        this.contents = [];\n        this.listContent();\n      } else {\n        this.contents = [];\n        this.listFolderContent(this.previousPath);\n      }\n    },\n  },\n  watch: {\n    repo() {\n      this.contents = [];\n      this.listContent();\n    },\n  },\n  components: { FilesList, FilesList },\n};\n</script>\n\n<style scoped>\n.icon {\n  width: 40px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}